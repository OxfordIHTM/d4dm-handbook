---
output-file: project-based-workflow.html
lightbox: auto
---

# Project-based workflow {#sec-project-based-workflow}

As our skills as data analysts grow, we begin to understand that our ability to realise our full potential goes beyond the data tools that we have chosen to use or have been made to use. The importance of surrounding systems and infrastructure for ensuring reproducibility and long-term preservation of our work becomes increasingly significant. However, a lack of formal training or mentorship in managing these systems often leads to either feeling overwhelmed by technology or resorting to self-exploration without proper guidance.

This chapter aims to guide you gracefully into the exploration of this realm of efficient, effective, and reproducible data workflows. The concepts and practices discussed here may highlight current and existing practices that you have that are ineffectual, disorganised, and irreproducible. If so, we encourage you not to worry about these past mistakes but instead use them to raise the bar for your new work. Small but meaningful incremental changes add up over time, transforming your data quality of life.

In this chapter, we will discuss concepts and practices borrowed from the computational sciences field that use programming languages to record and automate their processes and translate them for use with the spreadsheet software that is sort of a hybrid with data processes implemented through both point-and-click steps via the mouse and through in cell commands or functions for performing calculations and operations. This translation as applied to spreadsheets is not high fidelity given the shortcomings and limitations of spreadsheets (as discussed in @sec-spreadsheet-limitations) but still provides enough structure and rigour compared to the typical and common ad hoc and unstructured use of spreadsheets.

## Data processes as livestock rather than pets {#sec-data-livestock}

In modern data and computing, a common analogy used to describe the management of data and computational processes is that of managing a _herd of livestock_ compared to taking care of an _individual household pet_. For example, in cloud computing, individual servers are treated like "livestock" in that they can be easily destroyed and replaced via automation. 

::: {layout-ncol=2 layout-valign="bottom"}

![Microsoft Excel files as livestock](images/excel_livestock.jpg){#fig-excel-livestock}

![Microsoft excel file as a pet](images/excel_pet.jpg){#fig-excel-pet}

:::

It is recommended that we adopt a similar mindset when managing our data and data processes - design and develop appropriate data systems that manage data and data processes as disposable and rebuilt and re-implemented as needed rather than as precious "pets". We recommend this approach because if your workflow relies on an individual session or workspace in a non-reproducible way, it creates unnecessary risk and complexity. Instead, the focus should be on saving and relying on code and documentation to ensure reproducibility.

Applying this approach with spreadsheets is not as straightforward given the peculiarities of the tool compared to programming languages that use code to record each step of the workflow. However, steps can be done that can facilitate as much reproducibility when using spreadsheets.

### Detailed documentation for point-and-click mouse-based steps {#sec-spreadsheet-mouse-docs}

Point-and-click steps in a workflow implemented using a mouse can be documented either in a specific worksheet within the spreadsheet that is just meant for documentation. The documentation can also be done on a separate document either in Word document (`.docx`) format or in a text-based format such as Markdown (`.md`) or text file (`.txt`) written using a text editor (see @tip-text-editor for recommendations on text editors for different operating software). This separate file should be included within the directory where the spreadsheet file is located (see @fig-spreadsheet-docs-file). An example of a text file documenting steps for data cleaning is shown in @fig-spreadsheet-docs-text.

::: {layout-ncol="2" layout-valign="bottom"}

![A text file for documentation notes on point-and-click mouse-based steps](images/source_notes_text_file.png){#fig-spreadsheet-docs-file}

![An example documentation of point-and-click mouse-based steps and in cell functions and calculations](images/source_notes_text.png){#fig-spreadsheet-docs-text}

:::

### Saving a source for written functions in spreadsheets {#sec-spreadsheet-save-source}

Saving a text-based source file for the syntax of in cell functions and calculations used in a spreadsheet is one way of recording the non-mouse steps of the spreadsheet workflow. A text editor (rather than a word processor) would be ideal for this as the syntax of the function or formula will be shown more appropriately. If you are already using a text editor for documenting mouse-based steps of the spreadsheet workflow, it would be ideal to use the same text file to record in cell functions and calculations as shown in @fig-spreadsheet-docs-text.

:::{#tip-text-editor .callout-tip title="Recommended text editors"}

Following are recommended text editors for use with different operating software:

**For Windows** 

[Notepad++](https://notepad-plus-plus.org/) is a free source code editor and Notepad replacement that supports several languages. Running in the Microsoft Windows environment, its use is governed by [GNU General Public License](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html#SEC1).

**For Mac** 

[CodeEdit](https://www.codeedit.app/) is an exciting new code editor written entirely and unapologetically for macOS. Develop any project using any language at speeds like never before with increased efficiency and reliability in an editor that feels right at home on your Mac.

:::

Create a text file to associate with every spreadsheet project that you are working on. Save the text file within the same directory as the associated spreadsheet as shown in @fig-spreadsheet-docs-file.

## Organise work into projects {#sec-spreadsheet-projects}

Organising work into projects is another best practice that provides organisational clarity for our data and data processes. Whilst this can be interpreted in many ways and that some of you may argue that you already organise your work with data in projects, the following key points give a clear indication/definition of what we mean by project-based workflows.

### File system discipline {#sec-spreadsheet-file-system}

Simply put, this means putting all the files related to a single project in a designated folder. This applies to data, code, figures, notes, including the documentation and source files described earlier (see @fig-spreadsheet-project-file-structure). Depending on complexity of your project and on yours or your team's/organisation's preferences, you might enforce further organisation into subfolders. Related and relevant file system practices are discussed in @sec-spreadsheet-file-name.

![An example directory for the school nutrition project with all relevant files included](images/project-based-directory-structure.png){#fig-spreadsheet-project-file-structure fig-align="center"}

### File path discipline {#sec-spreadsheet-file-path}

All paths are relative and, by default, relative to the projectâ€™s folder. This is particularly important when you are referencing data found in one spreadsheet from within another spreadsheet for data analysis and visualisation. If files are within the same project, then relative paths make it easy to refer to associated or ancillary spreadsheets required for full analysis, visualisation, and reporting.

### File naming {#sec-spreadsheet-file-name}

> File organisation and naming are powerful weapons against chaos.

![An example of messy file names](images/file_organisation.png){#fig-messy-filenames fig-align="center"}

Best practices in file naming are based on the following three principles:

#### Machine-readable {.unnumbered}

Machine-readable file names avoid spaces, punctuation, accented characters, and case sensitivity. Avoiding these makes file names easier to index and search via use of **regular expressions** and **wild card matching** or **globbing**.

A regular expression, usually shortened as _regex_ or _regexp_ and sometimes referred to as _rational expression_, is a sequence of characters that specifies a match pattern in text. Usually such patterns are used by string-searching algorithms for _"find"_ or _"find and replace"_ operations on strings, or for input validation.

![Using regular expression to find all files that start with fig followed by a two-digit number](images/filename_regex_example.png){#fig-filename-regex-example fig-align="center"}

Globbing, also known as wildcard matching, is a technique used in computer systems to match multiple files or paths based on patterns containing wildcards like `*` (asterisk) and `?` (question mark). It's a common way to specify a set of files or paths in command-line interfaces, file managers, and programming languages. 
In simpler terms: globbing allows you to use patterns to find files that share a common naming structure, without having to specify each file individually.

![Using wildcard matching to find all PNG files](images/filename_wildcard_example.png){#fig-filename-wildcard-example fig-align="center"}

Machine-readable file names have deliberate use of delimiters/space-holders such as underscore (`_`) or hyphen (`-`). The general rule is that `_` is used to delimit units of metadata while `-` is used to delimit words so that they are more readable. This system allows for much easier recovery of metadata from file names.

#### Human-readable {.unnumbered}

A file name is human-readable if it contains information on what the file contains. It should be easy to figure out what something is based on its file name. This is a similar concept to a _slug_ from semantic URLs. A URL slug is the unique, identifiable portion of a web address (URL) that follows the domain name (e.g., "google.com"). It essentially acts as a "name tag" for a specific page or resource on a website, helping both users and search engines understand what the page is about.

#### Plays well with default ordering {.unnumbered}

File names should play well with default ordering. This is usually achieved by:

* putting something numeric first in a file name;

![Putting something numeric first in a file name](images/numeric_first.png){#fig-numeric-first fig-align="center"}

* using the ISO 8601 standard (YYYY-MM-DD) for dates; and,

* pad the left side of other numbers with zeros.

![Left pad other numbers with zeros](images/left_pad_zero_numeric.png){#fig-left-pad-numeric fig-align="center"}

## Gains from project-based workflows {#sec-projects-gains}

Developing the different project-based workflow habits described above collectively yields the most significant benefits. These practices ensure projects can move seamlessly across different computers or environments while maintaining reliability. Project-based workflow approach is a practical convention for achieving consistent behaviour across users and time comparable to societal norms like agreeing on traffic rules (e.g., driving on the left or right). Adhering to these conventions - whether in computing or in broader civilisation - constrains individual actions slightly for greater functionality and safety.


<br/>
<br/>
 